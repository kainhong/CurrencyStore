//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurrencyStore.Collector.Configration
{
    
    
    /// <summary>
    /// The CurrencyStoreSection Configuration Section.
    /// </summary>
    public partial class CurrencyStoreSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the CurrencyStoreSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string CurrencyStoreSectionSectionName = "currency.Store";
        
        /// <summary>
        /// Gets the CurrencyStoreSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public static global::CurrencyStore.Collector.Configration.CurrencyStoreSection Instance
        {
            get
            {
                return ((global::CurrencyStore.Collector.Configration.CurrencyStoreSection)(global::System.Configuration.ConfigurationManager.GetSection(global::CurrencyStore.Collector.Configration.CurrencyStoreSection.CurrencyStoreSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.CurrencyStoreSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::CurrencyStore.Collector.Configration.CurrencyStoreSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.CurrencyStoreSection.NamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::CurrencyStore.Collector.Configration.CurrencyStoreSection.NamePropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.CurrencyStoreSection.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Server Property
        /// <summary>
        /// The XML name of the <see cref="Server"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ServerPropertyName = "server";
        
        /// <summary>
        /// Gets or sets the Server.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Server.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.CurrencyStoreSection.ServerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::CurrencyStore.Collector.Configration.ServerElement Server
        {
            get
            {
                return ((global::CurrencyStore.Collector.Configration.ServerElement)(base[global::CurrencyStore.Collector.Configration.CurrencyStoreSection.ServerPropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.CurrencyStoreSection.ServerPropertyName] = value;
            }
        }
        #endregion
        
        #region Task Property
        /// <summary>
        /// The XML name of the <see cref="Task"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TaskPropertyName = "task";
        
        /// <summary>
        /// Gets or sets the Task.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Task.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.CurrencyStoreSection.TaskPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::CurrencyStore.Collector.Configration.TaskElement Task
        {
            get
            {
                return ((global::CurrencyStore.Collector.Configration.TaskElement)(base[global::CurrencyStore.Collector.Configration.CurrencyStoreSection.TaskPropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.CurrencyStoreSection.TaskPropertyName] = value;
            }
        }
        #endregion
        
        #region Authorization Property
        /// <summary>
        /// The XML name of the <see cref="Authorization"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string AuthorizationPropertyName = "authorization";
        
        /// <summary>
        /// Gets or sets the Authorization.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Authorization.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.CurrencyStoreSection.AuthorizationPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::CurrencyStore.Collector.Configration.AuthorizationElement Authorization
        {
            get
            {
                return ((global::CurrencyStore.Collector.Configration.AuthorizationElement)(base[global::CurrencyStore.Collector.Configration.CurrencyStoreSection.AuthorizationPropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.CurrencyStoreSection.AuthorizationPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace CurrencyStore.Collector.Configration
{
    
    
    /// <summary>
    /// The ServerElement Configuration Element.
    /// </summary>
    public partial class ServerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Port Property
        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.ServerElement.PortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=8234)]
        public virtual int Port
        {
            get
            {
                return ((int)(base[global::CurrencyStore.Collector.Configration.ServerElement.PortPropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.ServerElement.PortPropertyName] = value;
            }
        }
        #endregion
        
        #region Backlog Property
        /// <summary>
        /// The XML name of the <see cref="Backlog"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string BacklogPropertyName = "backlog";
        
        /// <summary>
        /// Gets or sets the Backlog.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Backlog.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.ServerElement.BacklogPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int Backlog
        {
            get
            {
                return ((int)(base[global::CurrencyStore.Collector.Configration.ServerElement.BacklogPropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.ServerElement.BacklogPropertyName] = value;
            }
        }
        #endregion
        
        #region Instrumentation Property
        /// <summary>
        /// The XML name of the <see cref="Instrumentation"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string InstrumentationPropertyName = "instrumentation";
        
        /// <summary>
        /// Gets or sets the Instrumentation.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Instrumentation.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.ServerElement.InstrumentationPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Instrumentation
        {
            get
            {
                return ((bool)(base[global::CurrencyStore.Collector.Configration.ServerElement.InstrumentationPropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.ServerElement.InstrumentationPropertyName] = value;
            }
        }
        #endregion
        
        #region Buffer Property
        /// <summary>
        /// The XML name of the <see cref="Buffer"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string BufferPropertyName = "buffer";
        
        /// <summary>
        /// Gets or sets the Buffer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Buffer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.ServerElement.BufferPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::CurrencyStore.Collector.Configration.BufferElement Buffer
        {
            get
            {
                return ((global::CurrencyStore.Collector.Configration.BufferElement)(base[global::CurrencyStore.Collector.Configration.ServerElement.BufferPropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.ServerElement.BufferPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace CurrencyStore.Collector.Configration
{
    
    
    /// <summary>
    /// The BufferElement Configuration Element.
    /// </summary>
    public partial class BufferElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region MaxLength Property
        /// <summary>
        /// The XML name of the <see cref="MaxLength"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string MaxLengthPropertyName = "maxLength";
        
        /// <summary>
        /// Gets or sets the MaxLength.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The MaxLength.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.BufferElement.MaxLengthPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=4000)]
        public virtual int MaxLength
        {
            get
            {
                return ((int)(base[global::CurrencyStore.Collector.Configration.BufferElement.MaxLengthPropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.BufferElement.MaxLengthPropertyName] = value;
            }
        }
        #endregion
        
        #region Size Property
        /// <summary>
        /// The XML name of the <see cref="Size"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string SizePropertyName = "size";
        
        /// <summary>
        /// Gets or sets the Size.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Size.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.BufferElement.SizePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=1024)]
        public virtual int Size
        {
            get
            {
                return ((int)(base[global::CurrencyStore.Collector.Configration.BufferElement.SizePropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.BufferElement.SizePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace CurrencyStore.Collector.Configration
{
    
    
    /// <summary>
    /// The TaskElement Configuration Element.
    /// </summary>
    public partial class TaskElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region PoolSize Property
        /// <summary>
        /// The XML name of the <see cref="PoolSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PoolSizePropertyName = "poolSize";
        
        /// <summary>
        /// Gets or sets 每次处理数据
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("每次处理数据")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.TaskElement.PoolSizePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=50)]
        public virtual int PoolSize
        {
            get
            {
                return ((int)(base[global::CurrencyStore.Collector.Configration.TaskElement.PoolSizePropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.TaskElement.PoolSizePropertyName] = value;
            }
        }
        #endregion
        
        #region Interval Property
        /// <summary>
        /// The XML name of the <see cref="Interval"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string IntervalPropertyName = "interval";
        
        /// <summary>
        /// Gets or sets the Interval.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Interval.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.TaskElement.IntervalPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=500)]
        public virtual int Interval
        {
            get
            {
                return ((int)(base[global::CurrencyStore.Collector.Configration.TaskElement.IntervalPropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.TaskElement.IntervalPropertyName] = value;
            }
        }
        #endregion
        
        #region Timeout Property
        /// <summary>
        /// The XML name of the <see cref="Timeout"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TimeoutPropertyName = "timeout";
        
        /// <summary>
        /// Gets or sets the Timeout.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Timeout.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.TaskElement.TimeoutPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=1000)]
        public virtual int Timeout
        {
            get
            {
                return ((int)(base[global::CurrencyStore.Collector.Configration.TaskElement.TimeoutPropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.TaskElement.TimeoutPropertyName] = value;
            }
        }
        #endregion
        
        #region Capacity Property
        /// <summary>
        /// The XML name of the <see cref="Capacity"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string CapacityPropertyName = "capacity";
        
        /// <summary>
        /// Gets or sets the Capacity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Capacity.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.TaskElement.CapacityPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=5)]
        public virtual int Capacity
        {
            get
            {
                return ((int)(base[global::CurrencyStore.Collector.Configration.TaskElement.CapacityPropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.TaskElement.CapacityPropertyName] = value;
            }
        }
        #endregion
        
        #region Storage Property
        /// <summary>
        /// The XML name of the <see cref="Storage"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string StoragePropertyName = "storage";
        
        /// <summary>
        /// Gets or sets the Storage.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Storage.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.TaskElement.StoragePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::CurrencyStore.Collector.Configration.StorageSection Storage
        {
            get
            {
                return ((global::CurrencyStore.Collector.Configration.StorageSection)(base[global::CurrencyStore.Collector.Configration.TaskElement.StoragePropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.TaskElement.StoragePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace CurrencyStore.Collector.Configration
{
    
    
    /// <summary>
    /// The AuthorizationElement Configuration Element.
    /// </summary>
    public partial class AuthorizationElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region AllowAnonymous Property
        /// <summary>
        /// The XML name of the <see cref="AllowAnonymous"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string AllowAnonymousPropertyName = "allowAnonymous";
        
        /// <summary>
        /// Gets or sets the AllowAnonymous.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The AllowAnonymous.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.AuthorizationElement.AllowAnonymousPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool AllowAnonymous
        {
            get
            {
                return ((bool)(base[global::CurrencyStore.Collector.Configration.AuthorizationElement.AllowAnonymousPropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.AuthorizationElement.AllowAnonymousPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace CurrencyStore.Collector.Configration
{
    
    
    /// <summary>
    /// The StorageSection Configuration Element.
    /// </summary>
    public partial class StorageSection : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.StorageSection.TypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::CurrencyStore.Collector.Configration.StorageSection.TypePropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.StorageSection.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region Enable Property
        /// <summary>
        /// The XML name of the <see cref="Enable"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EnablePropertyName = "enable";
        
        /// <summary>
        /// Gets or sets the Enable.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Enable.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.StorageSection.EnablePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="true")]
        public virtual bool Enable
        {
            get
            {
                return ((bool)(base[global::CurrencyStore.Collector.Configration.StorageSection.EnablePropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.StorageSection.EnablePropertyName] = value;
            }
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CurrencyStore.Collector.Configration.StorageSection.ValuePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Value
        {
            get
            {
                return ((string)(base[global::CurrencyStore.Collector.Configration.StorageSection.ValuePropertyName]));
            }
            set
            {
                base[global::CurrencyStore.Collector.Configration.StorageSection.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
