using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using CurrencyStore.Common;
using CurrencyStore.Common.ExtensionMethod;
using CurrencyStore.Common.Query;
using CurrencyStore.Entity;
using CurrencyStore.Repository;
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
using CurrencyStore.Common.Configration;

namespace CurrencyStore.Repository.Oracle
{
    public class CurrencyInfoRepository : ICurrencyInfoRepository
    {
        const string insert = "insert into tbl_currency_info (OrgId,BatchNumber,DeviceNumber,DeviceKindCode,DeviceModelCode," +
                               "OperatorNumber,OperateTime,BusinessType,ClientCardNumber,OrderNumber,CurrencyKindCode,FaceAmount,CurrencyVersion,CurrencyType," +
                               "PortNumber,IsSuspicious,CurrencyNumber,CurrencyImageType,CurrencyImage,IsDuplicate,IsUpload,HourCode ) ";//VALUES ");

        const string insert_item = "select {0},'{1}','{2}',{3},{4},{5},to_date('{6}','yyyy-MM-dd HH24:mi:ss'),{7}," +
                                    "'{8}',{9},{10},{11},{12},{13},{14},{15},'{16}',{17},'{18}',{19},{20},{21} from dual ";
        ElibLogging logger;
        public CurrencyInfoRepository()
        {
            logger = new ElibLogging("script");
        }

        public void BatchSave(List<CurrencyInfo> values)
        {
            this.BatchSave2(values);

            //if (values.Count() > 0)
            //{
            //    var script = GetInsertScript(values);

            //    logger.Info(script);

            //    DbHelper.ExecuteNonQuery(script);
            //}
        }
        private string GetInsertScript(List<CurrencyInfo> values)
        {
            var sb = new StringBuilder();
            //var items = values.Select(c => GetItemValueScript(c));
            //var tmp = string.Join("union all \r\n ", items);
            //if (string.IsNullOrEmpty(tmp))
            //    return string.Empty;
            //return "begin \r\n " + tmp + "\r\n end;"
            sb.Append(insert);
            for (int i = 0; i < values.Count; i++)
            {
                var item = values[i];
                sb.AppendFormat(insert_item,
                    item.OrgId,//0
                    item.BatchNumber,//1
                    item.DeviceNumber,//2
                    item.DeviceKindCode,//3
                    item.DeviceModelCode,//4
                    item.OperatorNumber,//
                    item.OperateTime.ToString("yyyy-MM-dd HH:mm:ss"),//6
                    item.BusinessType,//7
                    item.ClientCardNumber,
                    item.OrderNumber,//9
                    item.CurrencyKindCode,
                    item.FaceAmount,//11
                    item.CurrencyVersion,//
                    item.CurrencyType,//13
                    item.PortNumber,//14
                    item.IsSuspicious,//15
                    item.CurrencyNumber,//16
                    item.CurrencyImageType,//17
                    item.CurrencyImage.ToHexString(),//18
                    item.IsDuplicate,//19
                    item.IsUpload,//20
                    item.OperateTime.Hour); //21
                if (i < values.Count - 1)
                    sb.Append(" union all ");
            }

            return " begin " + sb.ToString() + "; commit; end;";
        }
        //private string GetItemValueScript(CurrencyInfo item)
        //{

        //    return string.Format("Select {0},'{1}','{2}',{3},{4},{5},to_date('{6}','yyyy-MM-dd HH24:mi:ss'),{7}," + 
        //                "'{8}',{9},{10},{11},{12},{13},{14},{15},'{16}',{17},'{18}',{19},{20} From dual ",
        //        item.OrgId,//0
        //        item.BatchNumber,//1
        //        item.DeviceNumber,//2
        //        item.DeviceKindCode,//3
        //        item.DeviceModelCode,//4
        //        item.OperatorNumber,//5
        //        item.OperateTime.ToString("yyyy-MM-dd HH:mm:ss"),//6
        //        item.BusinessType,//7
        //        item.ClientCardNumber,//8
        //        item.OrderNumber,//9
        //        item.CurrencyKindCode,//10
        //        item.FaceAmount,//11
        //        item.CurrencyVersion,//12
        //        item.CurrencyType,//13
        //        item.PortNumber,//14
        //        item.IsSuspicious,//15
        //        item.CurrencyNumber,//16
        //        item.CurrencyImageType,//17
        //        item.CurrencyImage.ToHexString(),//18
        //        item.IsDuplicate,//19
        //        item.IsUpload); //20
        //}


        public void BatchRegister(CurrencyInfo objCurrencyInfo)
        {
            string sql = null;
            List<DbParameter> parameterList = new List<DbParameter>();

            sql = " update tbl_currency_info set OrgId=:OrgId, DeviceKindCode=:DeviceKindCode, DeviceModelCode=:DeviceModelCode " +
                  " where OrgId=0 and DeviceNumber=:DeviceNumber and DeviceKindCode=0 and DeviceModelCode=0 ";

            parameterList.Add(new OracleParameter(":OrgId", objCurrencyInfo.OrgId));
            parameterList.Add(new OracleParameter(":DeviceKindCode", objCurrencyInfo.DeviceKindCode));
            parameterList.Add(new OracleParameter(":DeviceModelCode", objCurrencyInfo.DeviceModelCode));
            parameterList.Add(new OracleParameter(":DeviceNumber", objCurrencyInfo.DeviceNumber));

            DbHelper.ExecuteNonQuery(sql, CommandType.Text, parameterList.ToArray());
        }
        public void DeleteAll()
        {
            string sql = null;
            List<DbParameter> parameterList = new List<DbParameter>();

            sql = " truncate table tbl_currency_info ";

            DbHelper.ExecuteNonQuery(sql, CommandType.Text, parameterList.ToArray());
        }
        public void Clear(DateTime beforeTime)
        {
            string sql = null;
            List<DbParameter> parameterList = new List<DbParameter>();

            sql = " delete from tbl_currency_info where OperateTime<:BeforeTime ";

            parameterList.Add(new OracleParameter(":BeforeTime", beforeTime));

            DbHelper.ExecuteNonQuery(sql, CommandType.Text, parameterList.ToArray());
        }
        public List<CurrencyInfo> GetList(int orgId, bool isUnknownOrg, string startTime, string endTime, string deviceNumber, string currencyNumber, Pagination paging)
        {
            string sql = null;
            List<DbParameter> parameterList = new List<DbParameter>();

            sql = " select OrgId, BatchNumber, DeviceNumber, DeviceKindCode, DeviceModelCode, OperatorNumber, OperateTime, BusinessType, ClientCardNumber, " +
                  " OrderNumber, CurrencyKindCode, FaceAmount, CurrencyVersion, CurrencyType, PortNumber, IsSuspicious, CurrencyNumber, CurrencyImageType, CurrencyImage, " +
                  " IsDuplicate, IsUpload from tbl_currency_info Where 1=1 ";

            if (isUnknownOrg)
            {
                sql += " and OrgId=0 ";
            }

            if (!isUnknownOrg)
            {
                sql += " and OrgId=:OrgId ";

                parameterList.Add(new OracleParameter(":OrgId", orgId));
            }

            if (startTime.IsNotNullOrEmpty())
            {
                sql += " and OperateTime>=to_date(:StartTime,'yyyy-MM-dd HH24:mi:ss') ";

                parameterList.Add(new OracleParameter(":StartTime", startTime));
            }

            if (endTime.IsNotNullOrEmpty())
            {
                sql += " and OperateTime<=to_date(:EndTime,'yyyy-MM-dd HH24:mi:ss') ";

                parameterList.Add(new OracleParameter(":EndTime", endTime));
            }

            if (deviceNumber.IsNotNullOrEmpty())
            {
                sql += " and DeviceNumber=:DeviceNumber ";

                parameterList.Add(new OracleParameter(":DeviceNumber", deviceNumber));
            }

            if (currencyNumber.IsNotNullOrEmpty())
            {
                sql += " and instr(CurrencyNumber, :CurrencyNumber) > 0 ";

                parameterList.Add(new OracleParameter(":CurrencyNumber", currencyNumber));
            }

            sql += " order by OperateTime desc, OrderNumber desc ";

            if (paging != null)
            {
                return DbHelper.ExecutePagingList<CurrencyInfo>(sql, paging, Convert, parameterList.ToArray());
            }

            else
            {
                return DbHelper.ExecuteList<CurrencyInfo>(sql, Convert, CommandType.Text, parameterList.ToArray());
            }
        }
        private bool Convert(CurrencyInfo item, string field, object value)
        {
            if (string.Compare(field, "CurrencyImage", true) != 0)
                return false;
            item.CurrencyImage = CurrencyStore.Common.Helper.ToBytes(value.ToString());
            return true;
        }

        public void BatchSave2(List<CurrencyInfo> values)
        {
            string connectStr = System.Configuration.ConfigurationManager.ConnectionStrings[0].ConnectionString;

            OracleConnection conn = new OracleConnection(connectStr);
            OracleCommand command = new OracleCommand();
            command.Connection = conn;
            command.ArrayBindCount = values.Count;
            command.CommandText = " begin " + insert2 + insert_item2 + "; commit; end;";

            object[] pv1 = new object[values.Count];
            object[] pv2 = new object[values.Count];
            object[] pv3 = new object[values.Count];
            object[] pv4 = new object[values.Count];
            object[] pv5 = new object[values.Count];
            object[] pv6 = new object[values.Count];
            object[] pv7 = new object[values.Count];
            object[] pv8 = new object[values.Count];
            object[] pv9 = new object[values.Count];
            object[] pv10 = new object[values.Count];
            object[] pv11 = new object[values.Count];
            object[] pv12 = new object[values.Count];
            object[] pv13 = new object[values.Count];
            object[] pv14 = new object[values.Count];
            object[] pv15 = new object[values.Count];
            object[] pv16 = new object[values.Count];
            object[] pv17 = new object[values.Count];
            object[] pv18 = new object[values.Count];
            object[] pv19 = new object[values.Count];
            object[] pv20 = new object[values.Count];
            object[] pv21 = new object[values.Count];
            object[] pv22 = new object[values.Count];

            for (int i = 0; i < values.Count; i++)
            {
                pv1[i] = values[i].OrgId;//1
                pv2[i] = values[i].BatchNumber;//2
                pv3[i] = values[i].DeviceNumber;//3
                pv4[i] = values[i].DeviceKindCode;//4
                pv5[i] = values[i].DeviceModelCode;//5
                pv6[i] = values[i].OperatorNumber;//6
                pv7[i] = values[i].OperateTime;//7
                pv8[i] = values[i].BusinessType;//8
                pv9[i] = values[i].ClientCardNumber;//9
                pv10[i] = values[i].OrderNumber;//10
                pv11[i] = values[i].CurrencyKindCode;//11
                pv12[i] = values[i].FaceAmount;//12
                pv13[i] = values[i].CurrencyVersion;//13
                pv14[i] = values[i].CurrencyType;//14
                pv15[i] = values[i].PortNumber;//15
                pv16[i] = values[i].IsSuspicious;//16
                pv17[i] = values[i].CurrencyNumber;//17
                pv18[i] = values[i].CurrencyImageType;//18
                pv19[i] = values[i].CurrencyImage.ToHexString();//19
                pv20[i] = values[i].IsDuplicate;//20
                pv21[i] = values[i].IsUpload;//21
                pv22[i] = values[i].OperateTime.Hour;//22
            }

            OracleParameter p1 = new OracleParameter("p1", OracleDbType.Int32);
            p1.Value = pv1;
            command.Parameters.Add(p1);
            OracleParameter p2 = new OracleParameter("p2", OracleDbType.Char);
            p1.Value = pv2;
            command.Parameters.Add(p2);
            OracleParameter p3 = new OracleParameter("p3", OracleDbType.Varchar2);
            p3.Value = pv3;
            command.Parameters.Add(p3);
            OracleParameter p4 = new OracleParameter("p4", OracleDbType.Int16);
            p4.Value = pv4;
            command.Parameters.Add(p4);
            OracleParameter p5 = new OracleParameter("p5", OracleDbType.Int16);
            p5.Value = pv5;
            command.Parameters.Add(p5);
            OracleParameter p6 = new OracleParameter("p6", OracleDbType.Int16);
            p6.Value = pv6;
            command.Parameters.Add(p6);
            OracleParameter p7 = new OracleParameter("p7", OracleDbType.Date);
            p7.Value = pv7;
            command.Parameters.Add(p7);
            OracleParameter p8 = new OracleParameter("p8", OracleDbType.Int16);
            p8.Value = pv8;
            command.Parameters.Add(p8);
            OracleParameter p9 = new OracleParameter("p9", OracleDbType.Varchar2);
            p9.Value = pv9;
            command.Parameters.Add(p9);
            OracleParameter p10 = new OracleParameter("p10", OracleDbType.Int32);
            p10.Value = pv10;
            command.Parameters.Add(p10);
            OracleParameter p11 = new OracleParameter("p11", OracleDbType.Int16);
            p11.Value = pv11;
            command.Parameters.Add(p11);
            OracleParameter p12 = new OracleParameter("p12", OracleDbType.Int16);
            p12.Value = pv12;
            command.Parameters.Add(p12);
            OracleParameter p13 = new OracleParameter("p13", OracleDbType.Int16);
            p13.Value = pv13;
            command.Parameters.Add(p13);
            OracleParameter p14 = new OracleParameter("p14", OracleDbType.Int16);
            p14.Value = pv14;
            command.Parameters.Add(p14);
            OracleParameter p15 = new OracleParameter("p15", OracleDbType.Int16);
            p15.Value = pv15;
            command.Parameters.Add(p15);
            OracleParameter p16 = new OracleParameter("p16", OracleDbType.Int16);
            p16.Value = pv16;
            command.Parameters.Add(p16);
            OracleParameter p17 = new OracleParameter("p17", OracleDbType.Varchar2);
            p17.Value = pv17;
            command.Parameters.Add(p17);
            OracleParameter p18 = new OracleParameter("p18", OracleDbType.Int16);
            p18.Value = pv18;
            command.Parameters.Add(p18);
            OracleParameter p19 = new OracleParameter("p19", OracleDbType.Varchar2);
            p19.Value = pv19;
            command.Parameters.Add(p19);
            OracleParameter p20 = new OracleParameter("p20", OracleDbType.Int16);
            p20.Value = pv20;
            command.Parameters.Add(p20);
            OracleParameter p21 = new OracleParameter("p21", OracleDbType.Int16);
            p21.Value = pv21;
            command.Parameters.Add(p21);
            OracleParameter p22 = new OracleParameter("p22", OracleDbType.Int16);
            p22.Value = pv22;
            command.Parameters.Add(p22);

            conn.Open();
            command.ExecuteNonQuery();
            command.Connection.Clone();
        }

        public void BatchSave3(List<CurrencyInfo> values)
        {
            using (var T = new System.Transactions.TransactionScope())
            {

                string connectStr = System.Configuration.ConfigurationManager.ConnectionStrings[0].ConnectionString;

                OracleConnection conn = new OracleConnection(connectStr);
                OracleCommand command = new OracleCommand();
                command.Connection = conn;
                command.CommandText = insert2 + insert_item2;

                OracleParameter p1 = new OracleParameter(":p1", OracleDbType.Int32);
                command.Parameters.Add(p1);
                OracleParameter p2 = new OracleParameter(":p2", OracleDbType.Char);
                command.Parameters.Add(p2);
                OracleParameter p3 = new OracleParameter(":p3", OracleDbType.Varchar2);
                command.Parameters.Add(p3);
                OracleParameter p4 = new OracleParameter(":p4", OracleDbType.Int16);
                command.Parameters.Add(p4);
                OracleParameter p5 = new OracleParameter(":p5", OracleDbType.Int16);
                command.Parameters.Add(p5);
                OracleParameter p6 = new OracleParameter(":p6", OracleDbType.Int16);
                command.Parameters.Add(p6);
                OracleParameter p7 = new OracleParameter(":p7", OracleDbType.Date);
                command.Parameters.Add(p7);
                OracleParameter p8 = new OracleParameter(":p8", OracleDbType.Int16);
                command.Parameters.Add(p8);
                OracleParameter p9 = new OracleParameter(":p9", OracleDbType.Varchar2);
                command.Parameters.Add(p9);
                OracleParameter p10 = new OracleParameter(":p10", OracleDbType.Int32);
                command.Parameters.Add(p10);
                OracleParameter p11 = new OracleParameter(":p11", OracleDbType.Int16);
                command.Parameters.Add(p11);
                OracleParameter p12 = new OracleParameter(":p12", OracleDbType.Int16);
                command.Parameters.Add(p12);
                OracleParameter p13 = new OracleParameter(":p13", OracleDbType.Int16);
                command.Parameters.Add(p13);
                OracleParameter p14 = new OracleParameter(":p14", OracleDbType.Int16);
                command.Parameters.Add(p14);
                OracleParameter p15 = new OracleParameter(":p15", OracleDbType.Int16);
                command.Parameters.Add(p15);
                OracleParameter p16 = new OracleParameter(":p16", OracleDbType.Int16);
                command.Parameters.Add(p16);
                OracleParameter p17 = new OracleParameter(":p17", OracleDbType.Varchar2);
                command.Parameters.Add(p17);
                OracleParameter p18 = new OracleParameter(":p18", OracleDbType.Int16);
                command.Parameters.Add(p18);
                OracleParameter p19 = new OracleParameter(":p19", OracleDbType.Varchar2);
                command.Parameters.Add(p19);
                OracleParameter p20 = new OracleParameter(":p20", OracleDbType.Int16);
                command.Parameters.Add(p20);
                OracleParameter p21 = new OracleParameter(":p21", OracleDbType.Int16);
                command.Parameters.Add(p21);
                OracleParameter p22 = new OracleParameter(":p22", OracleDbType.Int16);
                command.Parameters.Add(p22);

                conn.Open();

                for (int i = 0; i < values.Count; i++)
                {
                    p1.Value = values[i].OrgId;//1
                    p2.Value = values[i].BatchNumber;//2
                    p3.Value = values[i].DeviceNumber;//3
                    p4.Value = values[i].DeviceKindCode;//4
                    p5.Value = values[i].DeviceModelCode;//5
                    p6.Value = values[i].OperatorNumber;//6
                    p7.Value = values[i].OperateTime;//7
                    p8.Value = values[i].BusinessType;//8
                    p9.Value = values[i].ClientCardNumber;//9
                    p10.Value = values[i].OrderNumber;//10
                    p11.Value = values[i].CurrencyKindCode;//11
                    p12.Value = values[i].FaceAmount;//12
                    p13.Value = values[i].CurrencyVersion;//13
                    p14.Value = values[i].CurrencyType;//14
                    p15.Value = values[i].PortNumber;//15
                    p16.Value = values[i].IsSuspicious;//16
                    p17.Value = values[i].CurrencyNumber;//17
                    p18.Value = values[i].CurrencyImageType;//18
                    p19.Value = values[i].CurrencyImage.ToHexString();//19
                    p20.Value = values[i].IsDuplicate;//20
                    p21.Value = values[i].IsUpload;//21
                    p22.Value = values[i].OperateTime.Hour;//22

                    command.ExecuteNonQuery();
                }

                T.Complete();

                command.Connection.Clone();
            }
        }

        const string insert2 = " insert into tbl_currency_info (OrgId,BatchNumber,DeviceNumber,DeviceKindCode,DeviceModelCode," +
                               " OperatorNumber,OperateTime,BusinessType,ClientCardNumber,OrderNumber,CurrencyKindCode,FaceAmount,CurrencyVersion,CurrencyType," +
                               " PortNumber,IsSuspicious,CurrencyNumber,CurrencyImageType,CurrencyImage,IsDuplicate,IsUpload,HourCode) ";

        const string insert_item2 = " values(:p1, :p2, :p3, :p4, :p5, :p6, :p7, :p8, :p9, :p10, :p11, :p12, :p13, :p14, :p15, :p16, :p17, :p18, :p19, :p20, :p21, :p22) ";
    }
}
